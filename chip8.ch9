# Define our variables.
@V0
@V1
@V2
@V3
@V4
@V5
@V6
@V7
@V8
@V9
@VA
@VB
@VC
@VD
@VE
@VF
@PCL
@PCH
@SPL
@SPH
@IL
@IH
@Sound
@Delay
@DelayTick
@Keys
@Rand


###---START LOADER---###

# This first part cannot use labels since we haven't copied the binary
# to the correct base address yet.
# Copy the emulator program to the base addr 0xA000
# BC = src, DE = tgt
# Remember our ROM starts at 0x325

21 0339
31 A000

# Read from [BC]
MOV.HL.BC
EC

# Write to [ED]
MOV.HL.DE
MOV.(HL).A

# Inc the registers.
A8
INX.DE

# Loop unless B = 0x40
MOV.A.B
CMPI 40
BF F5

# When done, jump to the new start of the ROM.
JMP A000

###---END LOADER---###

# Now enter CHIP8 Emulator land.


# -- Load ROM

# First job = load the ROM from stdin into memory at 0x200.
# Read number of bytes in ROM.  MSB then LSB
# e.g. if the ROM is 1283 bytes, enter 0x05 and then 0x03
# Store ROM size in BC
E0
79
E0
F9
17

# Now read in bytes until BC hits 0.
# Note there's no 16-bit DEC, so we have to do 2 loops.
LDX.HL 0200

load_rom_loop:
E0
MOV.(HL).A
INX.HL

# DEC C
17

# If no borrow, loop.
7F $load_rom_loop

# If carry, DEC B
07

# If no borrow, loop.
7F $load_rom_loop

# -- Initialization Routine

# Copy fonts to 0x0000
LDX.BC $font_sprites
LDX.DE 0000

copy_font_loop:

MOV.HL.BC
MOV.A.(HL)
MOV.HL.DE
MOV.(HL).A
INX.BC
INX.DE

MOV.A.E
CMPI 50
JMPNZ $copy_font_loop

# Init SP to 0xEFE
90 0E
LDX.HL $SPH
MOV.(HL).A
90 FE
LDX.HL $SPL
MOV.(HL).A

# Init PC to 0x200
90 02
LDX.HL $PCH
MOV.(HL).A
90 00
LDX.HL $PCL
MOV.(HL).A

CLRSCR

########################
# -- Main Loop
########################

main_loop:

# Spin to adjust timing.
LDI.A 0xAF
DEC.A
NJMPNZ 0xFD

# Tick Rand
LDX.HL $Rand
INC.(HL)

# Decrement delay timer.
CALL $dec_delay

# Load opcode into BC
CALL $load_opcode

# Switch on first byte.
MOV.A.B
CMPI 00
JMPZ $first_byte_00

# 0x1NNN
MOV.A.B
ANDI F0
XORI 10
JMPZ $goto_nnn

# 0x2NNN
MOV.A.B
ANDI F0
XORI 20
JMPZ $subr_call

# 0x3XNN
MOV.A.B
ANDI F0
XORI 30
JMPZ $op_skip_eq_const

# 0x4XNN
MOV.A.B
ANDI F0
XORI 40
JMPZ $op_skip_neq_const

# 0x5XNN
MOV.A.B
ANDI F0
XORI 50
JMPZ $op_skip_if_regs_eq

# 0x6XNN
MOV.A.B
ANDI F0
XORI 60
JMPZ $op_set_vx

# 0x7XNN
MOV.A.B
ANDI F0
XORI 70
JMPZ $op_add_to_vx

# 0x8XNN
MOV.A.B
ANDI F0
XORI 80
JMPZ $first_byte_8x

# TODO: More ops.

# 0xANNN
MOV.A.B
ANDI F0
XORI A0
JMPZ $op_set_i

# 0xCXNN
MOV.A.B
ANDI F0
XORI C0
JMPZ $op_get_rand

# 0xDNNN
MOV.A.B
ANDI F0
XORI D0
JMPZ $op_draw_sprite

# 0xE???
MOV.A.B
ANDI F0
XORI E0
JMPZ $first_byte_ex

# 0xF???
MOV.A.B
ANDI F0
XORI F0
JMPZ $first_byte_fx

FIRE

first_byte_00:

# Switch on second byte.
MOV.A.C
CMPI E0
JMPZ $clear_screen

CMPI EE
JMPZ $subr_return

FIRE

first_byte_8x:


MOV.A.C
ANDI 0F
CMPI 00
JMPZ $op_set_vx_vy

MOV.A.C
ANDI 0F
CMPI 01
JMPZ $op_or_vx_vy

MOV.A.C
ANDI 0F
CMPI 02
JMPZ $op_and_vx_vy

MOV.A.C
ANDI 0F
CMPI 03
JMPZ $op_xor_vx_vy

MOV.A.C
ANDI 0F
CMPI 04
JMPZ $op_add_vx_vy

MOV.A.C
ANDI 0F
CMPI 05
JMPZ $op_sub_vx_vy

# TODO: More

FIRE

first_byte_ex:

MOV.A.C

CMPI 9E
JMPZ $op_skip_if_vx_pressed

CMPI A1
JMPZ $op_skip_if_vx_not_pressed

FIRE

first_byte_fx:

# Switch on second byte

MOV.A.C

CMPI 07
JMPZ $op_get_delay

# TODO: FX0A not implemented.

CMPI 15
JMPZ $op_set_delay

# CHIP9 Doesn't have sound,  so skip.
CMPI 18
JMPZ $op_done

CMPI 1E
JMPZ $op_add_reg_to_i

CMPI 29
JMPZ $op_load_font_addr

CMPI 33
JMPZ $op_set_bcd

# TODO: FX55 not implemented

CMPI 65
JMPZ $op_load_registers

FIRE

clear_screen:
CLRSCR
# Also need to wipe in-memory screen
LDX.HL D000
LDI.(HL) 00
INC.L
NJMPNZ F9

JMP $op_done

subr_return:

CALL $return_from_subroutine
JMP $op_done

goto_nnn:

CALL $jump_to_address
JMP $op_done

subr_call:

CALL $call_subroutine
JMP $op_done

op_skip_eq_const:

CALL $skip_if_eq_const
JMP $op_done

op_skip_neq_const:

CALL $skip_if_neq_const
JMP $op_done

op_skip_if_regs_eq:

CALL $skip_if_regs_eq
JMP $op_done

op_set_vx:

MOV.A.B
MOV.B.C
CALL $set_vx
JMP $op_done

op_add_to_vx:

CALL $add_to_vx
JMP $op_done

op_set_i:

CALL $set_i
JMP $op_done

op_draw_sprite:

CALL $draw_sprite
JMP $op_done

op_add_reg_to_i:

CALL $add_reg_to_i
JMP $op_done

op_set_vx_vy:

CALL $set_vx_vy
JMP $op_done

op_or_vx_vy:

CALL $or_vx_vy
JMP $op_done

op_and_vx_vy:

CALL $and_vx_vy
JMP $op_done

op_xor_vx_vy:

CALL $xor_vx_vy
JMP $op_done

op_add_vx_vy:

CALL $add_vx_vy
JMP $op_done

op_sub_vx_vy:

CALL $sub_vx_vy
JMP $op_done

op_set_delay:

CALL $set_delay
JMP $op_done

op_get_delay:

CALL $get_delay
JMP $op_done

op_skip_if_vx_pressed:

CALL $skip_if_vx_pressed
JMP $op_done

op_skip_if_vx_not_pressed:

CALL $skip_if_vx_not_pressed
JMP $op_done

op_load_registers:

CALL $load_registers
JMP $op_done

op_set_bcd:

CALL $set_bcd
JMP $op_done

op_load_font_addr:

CALL $load_font_addr
JMP $op_done

op_get_rand:

CALL $get_rand
JMP $op_done

op_done:

JMP $main_loop

# -- END

########################
# -- Load Opcode
# Loads opcode into BC.
# Does not preserve any registers.
########################

load_opcode:

# Load CHIP8 PC into DE
LDX.HL $PCH
MOV.D.(HL)
LDX.HL $PCL
MOV.E.(HL)

# Load opcode into BC
MOV.HL.DE
MOV.B.(HL)
INX.HL
MOV.C.(HL)
INX.HL

# Store back the modified CHIP8 PC which is currently in HL.
MOV.D.H
MOV.E.L
LDX.HL $PCH
MOV.(HL).D
LDX.HL $PCL
MOV.(HL).E

RET

# -- END

########################
# -- Return from Subroutine
# Increment SP by two and load values into PC.
# Does not preserve any registers.
########################

return_from_subroutine:

# Load CHIP8 SP into DE
LDX.HL $SPH
MOV.D.(HL)
LDX.HL $SPL
MOV.E.(HL)


# Load bytes into BC and increment SP.
# 0 the stack as we go to make debugging easier.
INX.DE
MOV.HL.DE
MOV.C.(HL)
LDI.(HL) 00
INX.DE
INX.HL
MOV.B.(HL)
LDI.(HL) 00

# Store new SP

LDX.HL $SPH
MOV.(HL).D
LDX.HL $SPL
MOV.(HL).E

# Jump to address in BC.
CALL $jump_to_address

RET

# -- END

########################
# -- Jump to address
# Unconditional jump, set PC equal to lower 3 nibbles of BC.
########################

jump_to_address:

# High byte is in B, need to AND with 0x0F first.
MOV.A.B
ANDI 0F
LDX.HL $PCH
MOV.(HL).A

# Low byte is in C, just set directly.
LDX.HL $PCL
MOV.(HL).C

RET

# -- END

########################
# -- Call Subroutine
# Push PC, Jump.
# Jump address is in BC so don't touch BC!
########################

call_subroutine:

# Load SP into DE
LDX.HL $SPH
MOV.D.(HL)
LDX.HL $SPL
MOV.E.(HL)

# PCH -> A -> Stack
LDX.HL $PCH
MOV.A.(HL)
MOV.HL.DE
MOV.(HL).A

# Dec Stack.
DEC.E

# PCL -> A -> Stack
LDX.HL $PCL
MOV.A.(HL)
MOV.HL.DE
MOV.(HL).A

# Dec Stack.
DEC.E

# Store new Stack pointer.
LDX.HL $SPH
MOV.(HL).D
LDX.HL $SPL
MOV.(HL).E

# Jump to address in BC.
CALL $jump_to_address

RET

# -- END

########################
# -- Load VX Address
# Loads address for the register specified in lower nibble of A into HL.
########################

load_vx_addr:

ANDI 0F

LDX.HL $V0
CMPI 00
JMPZ $load_vx_addr_done

LDX.HL $V1
CMPI 01
JMPZ $load_vx_addr_done

LDX.HL $V2
CMPI 02
JMPZ $load_vx_addr_done

LDX.HL $V3
CMPI 03
JMPZ $load_vx_addr_done

LDX.HL $V4
CMPI 04
JMPZ $load_vx_addr_done

LDX.HL $V5
CMPI 05
JMPZ $load_vx_addr_done

LDX.HL $V6
CMPI 06
JMPZ $load_vx_addr_done

LDX.HL $V7
CMPI 07
JMPZ $load_vx_addr_done

LDX.HL $V8
CMPI 08
JMPZ $load_vx_addr_done

LDX.HL $V9
CMPI 09
JMPZ $load_vx_addr_done

LDX.HL $VA
CMPI 0A
JMPZ $load_vx_addr_done

LDX.HL $VB
CMPI 0B
JMPZ $load_vx_addr_done

LDX.HL $VC
CMPI 0C
JMPZ $load_vx_addr_done

LDX.HL $VD
CMPI 0D
JMPZ $load_vx_addr_done

LDX.HL $VE
CMPI 0E
JMPZ $load_vx_addr_done

LDX.HL $VF
CMPI 0F
JMPZ $load_vx_addr_done

FIRE

load_vx_addr_done:

RET

# -- END

########################
# -- Set VX
# Register number should be in lower nibble of A
# Target value should be in B
########################

set_vx:

CALL $load_vx_addr
MOV.(HL).B

RET

# -- END

########################
# -- Get Rand
# BC = 0xCXNN
# Set VX equal to NN & $Rand
########################

get_rand:

# Load $Rand into A
LDX.HL $Rand
MOV.A.(HL)

# Compute -> C
AND.C

# Store in VX
MOV.A.B
MOV.B.C
CALL $set_vx

RET

# -- END

########################
# -- Get VX
# Register number should be in lower nibble of A
# Value will be loaded into B
########################

get_vx:

CALL $load_vx_addr
MOV.B.(HL)

RET

# -- END

########################
# -- Skip instruction
# Moves PC forward by 2
########################

skip_instruction:

LDX.HL $PCH
MOV.D.(HL)
LDX.HL $PCL
MOV.E.(HL)
INX.DE
INX.DE
MOV.(HL).E
LDX.HL $PCH
MOV.(HL).D

RET

# -- END

########################
# -- Skip if Equal Constant
# Parse opcode 0x3XNN in BC
########################

skip_if_eq_const:

MOV.A.B
CALL $get_vx
MOV.A.C
CMP.B
NJMPNZ 03
CALL $skip_instruction

RET

# -- END

########################
# -- Skip if NOT Equal Constant
# Parse opcode 0x4XNN in BC
########################

skip_if_neq_const:

MOV.A.B
CALL $get_vx
MOV.A.C
CMP.B
NJMPZ 03
CALL $skip_instruction

RET

# -- END

########################
# -- Skip if Registers equal
# Parse opcode 0x5XY0 in BC
########################

skip_if_regs_eq:

CALL $load_vxy

# Now VX is in D and VY is in E
MOV.A.E
CMP.D
NJMPNZ 03
CALL $skip_instruction

RET

# -- END

########################
# -- LOAD VXY
# For BC = 0x?XY?
# Loads VX into D, VY into E.
# Leaves X in B, Y is destroyed.
########################

load_vxy:

# Get VX into D.
MOV.A.B
CALL $get_vx
MOV.D.B

# Need to shift C right by 4 to get the Y register.
# Do this by shifting LEFT 4 times, and shifting carry bits into B.
# We can left-shift just by doubling.
LDI.B 00

CALL $shift_left_16
CALL $shift_left_16
CALL $shift_left_16
CALL $shift_left_16

MOV.A.B
CALL $get_vx
MOV.E.B
MOV.B.A

RET

# -- END

########################
# -- Get I
# Set 16-bit register I into BC. (only 12bit)
########################

get_i:

LDX.HL $IH
MOV.B.(HL)
LDX.HL $IL
MOV.C.(HL)
MOV.A.B
ANDI 0F
MOV.B.A

RET

# -- END

########################
# -- Set I
# Set 16-bit register I with lower 3 nibbles of BC.
########################

set_i:

# Zero out top nibble.
MOV.A.B
ANDI 0F
MOV.B.A

LDX.HL $IH
MOV.(HL).B
LDX.HL $IL
MOV.(HL).C

RET

# -- END

########################
# -- Set Delay = VX
# BC = 0xFX15
########################

set_delay:

MOV.A.B
CALL $get_vx
LDX.HL $Delay
MOV.(HL).B
LDX.HL $DelayTick
LDI.(HL) 0x10

RET

# -- END

########################
# -- Set VX = Delay
# BC = 0xFX07
########################

get_delay:

MOV.A.B
LDX.HL $Delay
MOV.B.(HL)
CALL $set_vx

RET

# -- END

########################
# -- Decrement Delay
# Value ends up in B
########################

dec_delay:

LDX.HL $DelayTick
DEC.(HL)
JMPNZ $dec_delay_ret

LDI.(HL) 0x10
LDX.HL $Delay
MOV.A.(HL)
CMPI 00
JMPZ $dec_delay_ret

DEC.(HL)

dec_delay_ret:

RET

# -- END

########################
# -- Add to VX
# Args come in as 0x7XNN
########################

add_to_vx:

# Store off X in D because we get a value back in B
MOV.D.B

MOV.A.D
CALL $get_vx
MOV.A.B
ADD.C
MOV.B.C
MOV.A.D
CALL $set_vx

RET

# -- END

########################
# -- Set VX = VY
# Args come in as 0x8XY0
########################

set_vx_vy:

CALL $load_vxy

MOV.A.B
MOV.B.E
CALL $set_vx

RET

# -- END

########################
# -- VX | VY
# Args come in as 0x8XY1
########################

or_vx_vy:

CALL $load_vxy

MOV.A.E
ORR.D
MOV.A.B
MOV.B.D

CALL $set_vx

RET

# -- END

########################
# -- VX & VY
# Args come in as 0x8XY1
########################

and_vx_vy:

CALL $load_vxy

MOV.A.E
AND.D
MOV.A.B
MOV.B.D

CALL $set_vx

RET

# -- END

########################
# -- VX ^ VY
# Args come in as 0x8XY1
########################

xor_vx_vy:

CALL $load_vxy

MOV.A.E
XOR.D
MOV.A.B
MOV.B.D

CALL $set_vx

RET

# -- END

########################
# -- Add VX to VY
# Args come in as 0x8XY4
########################

add_vx_vy:

CALL $load_vxy

# Store off X, left in B.
PUSH.B

MOV.A.D
ADD.E

# Set carry
NJMPC 04

# No carry
LDI.B 00
NJMP 02

# Carry
LDI.B 01

LDI.A 0F
CALL $set_vx

# Store val.
POP.A
MOV.B.E
CALL $set_vx

RET

# -- END

########################
# -- Sub VX from VY and store in VX
# Args come in as 0x8XY4
########################

sub_vx_vy:

CALL $load_vxy

# Store off X, left in B.
PUSH.B

MOV.A.D
SUB.E

# Set carry
NJMPC 04

# No carry
LDI.B 00
NJMP 02

# Carry
LDI.B 01

LDI.A 0F
CALL $set_vx

# Store val.
POP.A
MOV.B.E
CALL $set_vx

RET

# -- END

########################
# -- Shift Left 16
# Args:
#  BC = value to shift.
########################

shift_left_16:

# Double C
MOV.A.C
ADD.A
MOV.C.A

JMPC $shift_left_16_carry

# No Carry
# Double B, don't add 1.
MOV.A.B
ADD.A
MOV.B.A
RET

# Carry
shift_left_16_carry:
# Double B, add 1.
MOV.A.B
ADD.A
ADDI 01
MOV.B.A
RET

#-- END

########################
# -- Draw Sprite
# BC = 0xDXYN
# Draws sprite at (X, Y) with height N.
# Sprite comes from register I.
# Sprite pixels are XORed with screen pixels.
# VF is set to 1 if any pixels flip from on to off, and 0 otherwise.
# We maintain an in-memory representation of the screen at 0xD000 so we can XOR the pixels.
# This is a pain because writes don't have to be byte-aligned.
########################

draw_sprite:

# Store off N for now.
MOV.A.C
ANDI 0F
PUSH.A

# Load X, Y -> D, E
CALL $load_vxy

# Truncate X, Y.
LDI.A 3F
AND.D
LDI.A 1F
AND.E

# Use BC as pixel ptr.
LDX.HL $IH
MOV.B.(HL)
LDX.HL $IL
MOV.C.(HL)

# VF = 0 by default.
LDX.HL $VF
LDI.(HL) 00

draw_y_loop:

# Get Pixels -> A
MOV.HL.BC
MOV.A.(HL)

# Store pixel pointer and raw X,Y
PUSH.BC
PUSH.DE

# So we currently have X, Y in D, E and Pixels in A.  BC is free.
# Load Pixels into BC, and shift left until X is byte-aligned.
LDI.B 00
MOV.C.A

draw_align_loop:
# If X is aligned, exit.
# Note: byte-aligned == least-significant 3 bits are 0
MOV.A.D
ANDI 07
JMPZ $draw_align_loop_end

# Not aligned, so shift left and increment X.
CALL $shift_left_16
INC.D

# Loop
JMP $draw_align_loop

draw_align_loop_end:

# So now we have the pixels split into B and C, byte-aligned.
# X (in D) points to the coordinate of the second one.
# Store off the pixel values while we do calculation.
PUSH.B
PUSH.C

# Now we can get the memory address for X, Y -> BC
CALL $get_xy_addr

# Load back the pixels and XOR to update the memory screen.
POP.A
MOV.HL.BC

PUSH.BC

# Need to set flag if any bits will change from 1 to 0.
# In other words, if A & HL != 0.
MOV.B.(HL)
AND.B
NJMPNZ 07
# Zero, set flag.
PUSH.HL
LDX.HL $VF
LDI.(HL) 01
POP.HL

XOR.(HL)

# Load the value and draw to actual screen.
# For CHIP9 draw call we need X in C, Y in B and pixels in A.
MOV.A.(HL)
MOV.C.D
MOV.B.E
DRAW
POP.BC

# Now get the second pixels and draw to X-8.
# We know the target address will just be one less than last time.
LDI.A 08
SUB.D
DEC.C
POP.A
MOV.HL.BC

# Need to set flag if any bits will change from 1 to 0.
# In other words, if A & HL != 0.
MOV.B.(HL)
AND.B
NJMPNZ 07
# Zero, set flag.
PUSH.HL
LDX.HL $VF
LDI.(HL) 01
POP.HL
XOR.(HL)

MOV.A.(HL)
MOV.C.D
MOV.B.E
DRAW

# Loop counter.
POP.DE
POP.BC
INX.BC
INC.E
POP.A
DEC.A
NJMPZ 04
PUSH.A
JMP $draw_y_loop

RET

# -- END

########################
# -- Get's address of X,Y in in-memory screen representation.
# Essentially this is 0xD000 + Y * 8 + X // 8
# Note the screen is 32x64, and we pack 8 pixels per byte.
# So the total screen takes up only 0x100 bytes.  Hence we only need to do 8-bit computation.
# -- Clobbers B and C.
# -- X, Y args in D, E are preserved.
# -- Address returned in BC
# Note: D MUST be byte-aligned.
########################

get_xy_addr:

# Use B as accumulator.
LDI.B 00

# Add 8 multiples of Y.
MOV.A.E
ADD.B
ADD.B
ADD.B
ADD.B
ADD.B
ADD.B
ADD.B
ADD.B

# Subtract 8 from X until it hits 0, adding 1 each time.
# Use C for tracking X.
MOV.C.D

get_xy_addrs_loop:

# If == 0, break.
MOV.A.C
CMPI 00
JMPZ $get_xy_addrs_loop_end

# Else, sub 8, add 1 and loop.
LDI.A 08
SUB.C
INC.B
JMP $get_xy_addrs_loop

get_xy_addrs_loop_end:

# Now form the 16-bit address in BC.
MOV.C.B
LDI.B D0

RET

# -- END

########################
# -- Add reg to I
# BC = 0xFX1E
# Sets VF to 1 if I overflowed 12 bits.
########################

add_reg_to_i:

# VX -> E
MOV.A.B
CALL $get_vx
MOV.E.B

# I -> BC
CALL $get_i

# Add.
MOV.A.E
ADDX.BC

# Check overflow.
MOV.A.B
ANDI F0
# Save off answer -> DE
MOV.D.B
MOV.E.C
NJMPZ 04

# Overflow
LDI.B 01
NJMP 02

# No Overflow
LDI.B 00

# Store.
LDI.A 0F
CALL $set_vx
MOV.B.D
MOV.C.E
CALL $set_i

RET

# -- END

########################
# -- Get key state of key VX.
# BC = 0xEX??
# Note the CHIP9 only has 8 keys, so we can only emulate 8 keys.
# The @Keys variable has the key states in bits.
# We AND with the relevant mask to extract the state.
# The state of the key will be in the Z flag.
# Z if not pressed, NZ if pressed.
########################

check_key:

# Load VX -> B
MOV.A.B
CALL $get_vx

# Load key states -> C
LDX.HL F000
MOV.C.(HL)

# Select a mask. (i.e. key mapping)
# For now just map 1 -> bit 1, 2 -> bit 2 etc.
# Load mask into D.
MOV.A.B

CMPI 01
# CHIP9 Up
LDI.D 80
JMPZ $check_key_mask_selected

CMPI 04
# CHIP9 Left
LDI.D 40
JMPZ $check_key_mask_selected

CMPI 04
# CHIP9 Down
LDI.D 20
JMPZ $check_key_mask_selected

CMPI 06
# CHIP9 Right
LDI.D 10
JMPZ $check_key_mask_selected

CMPI 05
# CHIP9 A
LDI.D 08
JMPZ $check_key_mask_selected

CMPI 0F
# CHIP9 B
LDI.D 04
JMPZ $check_key_mask_selected

CMPI 0C
# CHIP9 Start
LDI.D 02
JMPZ $check_key_mask_selected

CMPI 0D
# CHIP9 Select
LDI.D 01
JMPZ $check_key_mask_selected

# All other keys always unpressed.

LDI.A 00
AND.A
RET

check_key_mask_selected:

# Now check the bit.
MOV.A.D
AND.C

RET

# -- END

########################
# -- Skip Instruction if key VX pressed.
########################

skip_if_vx_pressed:

CALL $check_key
NJMPZ 03

# Pressed
CALL $skip_instruction

RET

# -- END

########################
# -- Skip Instruction if key VX not pressed.
########################

skip_if_vx_not_pressed:

CALL $check_key
NJMPNZ 03

# Pressed
CALL $skip_instruction

RET

# -- END

########################
# -- Load registers.
# BC = 0xFX55
# Loads registers from V0 to VX with values in memory starting from I.
########################

load_registers:

# Move X into D.
MOV.A.B
ANDI 0F
MOV.D.A

# Load I -> BC -> HL
CALL $get_i
MOV.HL.BC

# Reg to set -> C
LDI.C 00

load_registers_loop:

# Set register VD
MOV.A.C
MOV.B.(HL)
# set_vx will clobber HL, so store it off.
PUSH.HL
CALL $set_vx
POP.HL

# Break if D == 0
MOV.A.D
CMPI 00
JMPZ $load_registers_ret

# Otherwise poke variables and loop.
DEC.D
INC.C
INX.HL
JMP $load_registers_loop

load_registers_ret:

RET

# -- END

########################
# -- Set BCD
# Stores BCD form of VX in memory with highest digit at I.
########################

set_bcd:

# For now just set all digits to 0 except the smallest.
# TODO: Implement.

# VX -> A
MOV.A.B
CALL $get_vx
MOV.A.B

# I -> BC
CALL $get_i
MOV.HL.BC
LDI.(HL) 00
INX.HL
LDI.(HL) 00
INX.HL

# Get units below 7.
ANDI 07
MOV.(HL).A

RET

# -- END

########################
# -- Load font addr
# BC = 0xFX29
# Sets I to the address of sprite for digit in VX.
########################

load_font_addr:

# Digit -> A
MOV.A.B
CALL $get_vx
MOV.A.B

# Fonts are loaded into memory starting at 0x0000
# Each is 5 bytes.

LDX.BC 0000
CMPI 00
JMPZ $load_font_addr_ret

LDX.BC 0005
CMPI 01
JMPZ $load_font_addr_ret

LDX.BC 000A
CMPI 02
JMPZ $load_font_addr_ret

LDX.BC 000F
CMPI 03
JMPZ $load_font_addr_ret

LDX.BC 0014
CMPI 04
JMPZ $load_font_addr_ret

load_font_addr_ret:

CALL $set_i

RET

# -- END


########################
# -- FONT DATA
########################

FIRE

font_sprites:
11110000
10010000
10010000
10010000
11110000

00100000
01100000
00100000
00100000
01110000

11110000
00010000
11110000
10000000
11110000

11110000
00010000
11110000
00010000
11110000

10010000
10010000
11110000
00010000
00010000

# HCF
FIRE
